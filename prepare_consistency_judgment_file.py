import pandas as pd
import json
import asyncio
import os

full_consistency_judgment_prompt = """
You will be given 4 versions of a short conversation in English between two speakers. Conversant A always begins with a description of an image they are viewing.

The original conversation was written in Bemba, a Central African language. The 4 English versions that are presented to you are attempts at translations of the original conversation into English.
The 4 versions come from 2 different LLM models. 2 versions are generated by model 1, and 2 versions are generated by model 2.

Your task is to judge which model is more consistent in its translations.
We are NOT asking you to judge which version is more fluent or more accurate. We are only judging which model is more consistent.
Meaning which model's 2 versions are closer to each other in meaning.

Respond with 1, 2, or 3:
- 1 if Model 1 is more consistent.
- 2 if Model 2 is more consistent.
- 3 if both models are equally consistent.

Just respond with the number. Do not include any other text.

---

**Model 1 Version 1:**
{model_1_version_1}

**Model 1 Version 2:**
{model_1_version_2}

**Model 2 Version 1:**
{model_2_version_1}

**Model 2 Version 2:**
{model_2_version_2}

**Your response:**
"""

async def prepare_consistency_judgment_file(
        v1_model,
        v2_model,
        version_name="v0"
    ):

    v1_t1_jsonl_path = f"./Data/Output/translations_high_temp/big_c_conversations_test_{v1_model}_t1.jsonl"
    v1_t2_jsonl_path = f"./Data/Output/translations_high_temp/big_c_conversations_test_{v1_model}_t2.jsonl"
    v2_t1_jsonl_path = f"./Data/Output/translations_high_temp/big_c_conversations_test_{v2_model}_t1.jsonl"
    v2_t2_jsonl_path = f"./Data/Output/translations_high_temp/big_c_conversations_test_{v2_model}_t2.jsonl"

    # Read JSONL files
    df_1_t1 = pd.read_json(v1_t1_jsonl_path, lines=True)
    df_1_t2 = pd.read_json(v1_t2_jsonl_path, lines=True)
    df_2_t1 = pd.read_json(v2_t1_jsonl_path, lines=True)
    df_2_t2 = pd.read_json(v2_t2_jsonl_path, lines=True)
    
    # Start with df_1_t1 as the base DataFrame
    result_df = df_1_t1

    # Merge df_1_t2 on 'id', keeping all columns from result_df
    result_df = result_df.merge(df_1_t2, on='id', how='left', suffixes=('', '_dup'))

    # Merge df_2_t1 on 'id'
    result_df = result_df.merge(df_2_t1, on='id', how='left', suffixes=('', '_dup'))

    # Merge df_2_t2 on 'id'
    result_df = result_df.merge(df_2_t2, on='id', how='left', suffixes=('', '_dup'))

    # Remove duplicate columns if any
    duplicate_columns = [col for col in result_df.columns if col.endswith('_dup')]
    result_df.drop(columns=duplicate_columns, inplace=True)
    
    # Add v1_model and v2_model columns
    result_df['v1_model'] = v1_model
    result_df['v2_model'] = v2_model

    # Generate the full consistency judgment prompt
    result_df['full_consistency_judgment_prompt'] = result_df.apply(
        lambda row: full_consistency_judgment_prompt.format(
            model_1_version_1=row[f'{v1_model}_translation_t1'],
            model_1_version_2=row[f'{v1_model}_translation_t2'],
            model_2_version_1=row[f'{v2_model}_translation_t1'],
            model_2_version_2=row[f'{v2_model}_translation_t2']
        ), axis=1
    )
    
    # Define the output file path
    output_file = f"./Data/Output/consistency_judgements/{version_name}_big_c_test_{v1_model}_vs_{v2_model}.jsonl"
    
    # Check if the file already exists
    if os.path.exists(output_file):
        print(f"File '{output_file}' already exists. Skipping file creation.")
    else:
        # Save to JSONL file
        result_df.to_json(output_file, orient='records', lines=True)
        print(f"File '{output_file}' has been created.")

async def main():
    await prepare_consistency_judgment_file(
        v1_model="aya_8b",
        v2_model="gpt_4o",
        version_name="vtest"
    )

if __name__ == "__main__":
    asyncio.run(main())
